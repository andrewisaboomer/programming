//Not My Name 5/26/2021
//A bad platformer

//Replit doesn't like my program for some reason and it only spits out a script error
//It works completely fine in the PDE and replit's extremely comprehensive errors are extremely helpful for finding what I need to fix
//So I guess you'll just have to run it in the PDE

//Not a lot of comments because I don't feel like it
//I'm not gonna explain every single little bit of the code because that'll take waaaaaaaaaaaaaaay too long

import java.awt.Robot;
import java.awt.AWTException;
Robot robot;

//initialize A LOT of variables
PImage bg;
PImage dead;
PImage menu;
PImage menu2;
PImage instructions;
PImage level1;
PImage level2;
PImage level3;
PImage win;

float camX = 0;
float camY = 0;
float camZ = 0;

float camCenterX = 100;
float camCenterY = 100;
float camCenterZ = -100;

float posX;
float posZ;
float negX;
float negZ;

//for camera "looking at coordinate" movement
float curXRadians = atan((camZ - camCenterZ) / (camX - camCenterX));
float curYRadians = -atan((camY - camCenterY) / sqrt((camX - camCenterX) * (camX - camCenterX) + (camZ - camCenterZ) * (camZ - camCenterZ)));

boolean wPressed = false;
boolean aPressed = false;
boolean sPressed = false;
boolean dPressed = false;
boolean spacePressed = false;

float spaceHeightLeft = 0;
boolean reachedMaxJump = false;
float jumpTimeLeft = 15;
float fallDistanceLeft = 0;

//for jumping and falling
float yChangeJump = 2.5;
float yChange = 0;
float yChangeChange = 0.09;
float yTerminalVelocity = -2;

boolean escMenu = false;
boolean ignoreCursor = false;

//for better buttons (pressing a button and moving the mouse out will not trigger the button, have to press and release the mouse in the button)
boolean mousePressedInMenu = false;
boolean mousePressedInRespawn = false;
boolean startPressedInMenu = false;
boolean instructionsPressedInMenu = false;
boolean backPressedInMenu = false;
boolean instructionsMenu = false;
boolean mainMenu = true;
boolean won = false;
boolean paPressedInMenu = false;

int cubeSize = 20;

float playerHeight = cubeSize * 1.5;
float playerHorizontalSize = cubeSize / 3;
float playerDiagonalSize = playerHorizontalSize * 1.41421;

float moveSpeed = 1;

boolean start = false;
boolean isDead = false;
boolean betweenLevels = true;

int frameReference = 0;

int whichLevel = 0;

//a really massive 4 dimensional character array holding my levels
char[][][][] level = {{{
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', 's', 'w' ,'w', 'w', 'w', 'w', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', 'w', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', 'w', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', 'w', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', 'w', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', 'w', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', 'w', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', 'w', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', 'w', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', 'w', 'w', ' ', 'w', 'w', 'w', 'w', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '*', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                    }, {
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                    }, {
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                    }, {
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                    }, {
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                    }, {
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                    }}, {{ // LEVEL 2
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', 's', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,'w', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', 'w', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', 'w', 'w', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', 'w', 'w', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                    }, {
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', 'w', 'w', ' ', ' ', '*', '*'},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', 'w', 'w', ' ', ' ', '*', '*'},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                    }, {
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                    }, {
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                    }, {
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                    }, {
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                    }}, {{ // LEVEL 3
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', 's', ' ' ,' ', ' ', 'w', ' ', ' ', ' ', 'w', ' ', ' ', ' ', 'w', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'w', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'w', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', 'w', ' ', ' ', ' ', 'w', ' ', ' ', ' ', 'w', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                    }, {
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,'w', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                    }, {
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,'w', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                    }, {
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,'w', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                    }, {
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,'w', ' ', ' ', ' ', '*', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                    }, {
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                    }}, {{ // LEVEL 3
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', 's', ' ' ,' ', ' ', '.', ' ', ' ', ' ', ' ', 'w', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'w', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '.', '.', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '.', '.', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', 'w', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                    }, {
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,'w', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                    }, {
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,'.', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                    }, {
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,'w', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                    }, {
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,'w', ' ', ' ', ' ', '*', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                    }, {
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                      {' ', ' ', ' ' ,' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                    }}};

boolean button(int x, int y, int w, int h) {
  //simple button function that tells you if your mouse is in a rectangle using CENTER format
  if (mouseX > x - w/2 && mouseX < x + w/2 && mouseY > y - h/2 && mouseY < y + h/2) {
    return true;
  }
  
  return false;
}

boolean checkCoord(int i, int j, int k) {
  //falling collision
  try {
    if (level[whichLevel][i][j][k] != ' ' && level[whichLevel][i][j][k] != ',') {
      fallDistanceLeft = (-(i + 1) * cubeSize) - camY;
      //// println(camY);
      //// println(fallDistanceLeft);
      return true;
    }
    
    fallDistanceLeft = 50 - camY;
    if (fallDistanceLeft > 0.1 || fallDistanceLeft < -0.1) {
      return false;
    } else {
      return true;
    }
  }
  catch (Exception e) {
    fallDistanceLeft = 1000;
    return false;  
  }
}

boolean isOnGround() {
  //utilizes checkCoord to check 4 coordinates of a player's body (because the player isn't a flat stick)
  float posX = camX + playerHorizontalSize;
  float posZ = camZ + playerHorizontalSize;
  float negX = camX - playerHorizontalSize;
  float negZ = camZ - playerHorizontalSize;
  
  int i = floor(-camY / cubeSize) - 1;
  
  int jPP = floor(-(posZ - cubeSize/2) / cubeSize);
  int kPP = floor((posX + cubeSize/2) / cubeSize);
  
  int jNP = floor(-(posZ - cubeSize/2) / cubeSize);
  int kNP = floor((negX + cubeSize/2) / cubeSize);
  
  int jPN = floor(-(negZ - cubeSize/2) / cubeSize);
  int kPN = floor((posX + cubeSize/2) / cubeSize);
  
  int jNN = floor(-(negZ - cubeSize/2) / cubeSize);
  int kNN = floor((negX + cubeSize/2) / cubeSize);
  if (i < 0) {
    fallDistanceLeft = 1000;
    return false;
  }
  
  //// println("------NEW BLOCK------");
  //// println("Position: ", camY, camZ, camX);
  //// println("Array Position Value: ", level[whichLevel][i][j][k]);
  //// println("Array Position: ", i, j, k);
  
  //checking each of the 4 coordinates to get a more meaningful output
  boolean t1 = checkCoord(i, jPP, kPP);
  float f1 = fallDistanceLeft;
  boolean t2 = checkCoord(i, jNP, kNP);
  float f2 = fallDistanceLeft;
  boolean t3 = checkCoord(i, jPN, kPN);
  float f3 = fallDistanceLeft;
  boolean t4 = checkCoord(i, jNN, kNN);
  float f4 = fallDistanceLeft;
  fallDistanceLeft = min(min(f1, f2), min(f3, f4));
  if (t1 || t2 || t3 || t4) {
    return true;
  } else {
    return false;
  }
}

boolean checkVCoords(int lowi, int highi, int j, int k) {
  //collision with the sides of blocks
  try {
    // println(lowi, highi);
    if (lowi == -1) {
      lowi = 0;
    }
    for ( ; lowi < highi && lowi < 6; lowi++) {
      if (level[whichLevel][lowi][j][k] != ' ' && level[whichLevel][lowi][j][k] != ',') {
        return true;
      }
    }
    return false;
  }
  catch (Exception e) {
    //you're outside the level array, you're definitely not in a block
    return false;
  }
}

void movePlayer() {
  //moves the player and some utilizes checkVCoords for collision against blocks
  float oldCamX = camX;
  float oldCamZ = camZ;
  float oldCamCenterX = camCenterX;
  float oldCamCenterZ = camCenterZ;
  
  float wDistance = dist(camX, camZ, camCenterX, camCenterZ);
  float wCamX = (camCenterX - camX) / wDistance * moveSpeed;
  float wCamZ = (camCenterZ - camZ) / wDistance * moveSpeed;
  
  float sCamX = (camX - camCenterX) / wDistance * moveSpeed;
  float sCamZ = (camZ - camCenterZ) / wDistance * moveSpeed;

  float perpendicularSlope = -1/((camCenterZ - camZ) / (camCenterX - camX));
  
  float distX = camX + 100;
  float distZ = camZ + perpendicularSlope * 100;
  
  float aDistance = dist(distX, distZ, camX, camZ);
  
  float aCamX;
  float aCamZ;
  
  if (degrees(curXRadians) % 360 > 180) {
    aCamX = (camX - distX) / aDistance * moveSpeed;
    aCamZ = (camZ - distZ) / aDistance * moveSpeed;
  } else {
    aCamX = -(camX - distX) / aDistance * moveSpeed;
    aCamZ = -(camZ - distZ) / aDistance * moveSpeed;
  }
  
  float dCamX = -aCamX;
  float dCamZ = -aCamZ;
  
  float endX = 0;
  float endZ = 0;
  
  if (wPressed) {
    endX += wCamX;
    endZ += wCamZ;
  }
  
  if (sPressed) {
    endX += sCamX;
    endZ += sCamZ;
  }
  
  if (aPressed) {
    endX += aCamX;
    endZ += aCamZ;
  }
  
  if (dPressed) {
    endX += dCamX;
    endZ += dCamZ;
  }
  
  camX += endX;
  camCenterX += endX;
  
  camZ += endZ;
  camCenterZ += endZ;
  
  //collision against blocks
  int lowi = ceil(-(camY + 2 * cubeSize + 3 - cubeSize / 2) / cubeSize);
  int highi = floor(-(camY) / cubeSize) + 2;
  int j = floor(-(camZ - cubeSize/2) / cubeSize);
  int k = floor((camX + cubeSize/2) / cubeSize);
  float posX = camX + playerHorizontalSize;
  float posZ = camZ + playerHorizontalSize;
  float negX = camX - playerHorizontalSize;
  float negZ = camZ - playerHorizontalSize;
  
  int jPP = floor(-(posZ - cubeSize/2) / cubeSize);
  int kPP = floor((posX + cubeSize/2) / cubeSize);
  
  int jNP = floor(-(posZ - cubeSize/2) / cubeSize);
  int kNP = floor((negX + cubeSize/2) / cubeSize);
  
  int jPN = floor(-(negZ - cubeSize/2) / cubeSize);
  int kPN = floor((posX + cubeSize/2) / cubeSize);
  
  int jNN = floor(-(negZ - cubeSize/2) / cubeSize);
  int kNN = floor((negX + cubeSize/2) / cubeSize);
  
  boolean f1 = checkVCoords(lowi, highi, jPP, kPP);
  boolean f2 = checkVCoords(lowi, highi, jNP, kNP);
  boolean f3 = checkVCoords(lowi, highi, jPN, kPN);
  boolean f4 = checkVCoords(lowi, highi, jNN, kNN);
  if (f1) {
    int diffZ = jPP - j;
    int diffX = kPP - k;
    if (diffZ != 0 && diffX != 0) {
      if (checkVCoords(lowi, highi, jPP, k)) {
        camZ = oldCamZ;
        camCenterZ = oldCamCenterZ;
      } else {
        camX = oldCamX;
        camCenterX = oldCamCenterX;
      }
      // println("fall");
    } else if (diffZ != 0) {
      camZ = oldCamZ;
      camCenterZ = oldCamCenterZ;
    } else if (diffX != 0) {
      camX = oldCamX;
      camCenterX = oldCamCenterX;
    }
  }  else if (f2) {
    int diffZ = jNP - j;
    int diffX = kNP - k;
    if (diffZ != 0 && diffX != 0) {
      if (checkVCoords(lowi, highi, jNP, k)) {
        camZ = oldCamZ;
        camCenterZ = oldCamCenterZ;
      } else {
        camX = oldCamX;
        camCenterX = oldCamCenterX;
      }
      // println("fall");
    } else if (diffZ != 0) {
      camZ = oldCamZ;
      camCenterZ = oldCamCenterZ;
    } else if (diffX != 0) {
      camX = oldCamX;
      camCenterX = oldCamCenterX;
    }
  } else if (f3) {
    int diffZ = jPN - j;
    int diffX = kPN - k;
    if (diffZ != 0 && diffX != 0) {
      if (checkVCoords(lowi, highi, jPN, k)) {
        camZ = oldCamZ;
        camCenterZ = oldCamCenterZ;
      } else {
        camX = oldCamX;
        camCenterX = oldCamCenterX;
      }
      // println("fall");
    } else if (diffZ != 0) {
      camZ = oldCamZ;
      camCenterZ = oldCamCenterZ;
    } else if (diffX != 0) {
      camX = oldCamX;
      camCenterX = oldCamCenterX;
    }
  } else if (f4) {
    int diffZ = jNN - j;
    int diffX = kNN - k;
    if (diffZ != 0 && diffX != 0) {
      if (checkVCoords(lowi, highi, jNN, k)) {
        camZ = oldCamZ;
        camCenterZ = oldCamCenterZ;
      } else {
        camX = oldCamX;
        camCenterX = oldCamCenterX;
      }
      // println("fall");
    } else if (diffZ != 0) {
      camZ = oldCamZ;
      camCenterZ = oldCamCenterZ;
    } else if (diffX != 0) {
      camX = oldCamX;
      camCenterX = oldCamCenterX;
    }
  }
}

void moveMouse() {
  //lots of mAth and pAIN aNd SUFFerING
  if ((mouseX - width/2) != 0 || (mouseY - height/2) != 0) {
    float xMovement = -(mouseX - width/2) * 17500;
    float yMovement = (mouseY - height/2) * 17500;
    
    float xRadius = dist(camX, camZ, camCenterX, camCenterZ);
    float yRadius = dist(camX, camY, camZ, camCenterX, camCenterY, camCenterZ);

    float xRadians = radians(xMovement / 2 / 3.1415926 / yRadius / 360);
    float yRadians = radians(yMovement / 2/ 3.1415926 / yRadius / 360);
    
    curXRadians -= xRadians;
    
    float newX = cos(curXRadians) * xRadius;
    float newZ = sin(curXRadians) * xRadius;
    
    camCenterX = camX + newX;
    camCenterZ = camZ + newZ;
    //// println("-----NEW BLOCK-----");
    //// println("camCenterX is " +  camCenterX);
    //// println("camCenterY is " + camCenterY);
    //// println("camCenterZ is " + camCenterZ);
    //// println("curYRadians is " + curYRadians);
    //// println("yRadius is " + yRadius);
    //// println("curXRadians is " + curXRadians);
    //// println("xRadians is " + xRadians);
    while (curXRadians < 0) {
      curXRadians += 3.1415926 * 2;
    }
    
    curYRadians += yRadians;
    camCenterY = sin(curYRadians) * yRadius + camY;
    float newXRadius = cos(curYRadians) * yRadius;
    camCenterX = camX + cos(curXRadians) * newXRadius;
    camCenterZ = camZ + sin(curXRadians) * newXRadius;
    
    while (curYRadians < 0) {
      curYRadians += 3.1415926 * 2;
    }
    
    while (curYRadians > 3.1415926 * 2) {
      curYRadians -= 3.1415926 * 2;
    }
    
    //if (curYRadians > 4.71249) {
    //  curYRadians = 4.71248;
    //}
  }
}

void drawBlocks(char[][][][] level) {
  //draws some blocks based on the level
  for (int i = 0; i < 6; i++) {
    for (int j = 0; j < 16; j++) {
      for (int k = 0; k < 16; k++) {
        if (level[whichLevel][i][j][k] != ' ') {
          switch (level[whichLevel][i][j][k]) {
            case 's':
              fill(255, 200, 0);
              break;
            case 'g':
              fill(0, 255, 0);
              break;
            case 'b':
              fill(0, 0, 255);
              break;
            case 'r':
              fill(255, 0, 0);
              break;
            case 'p':
              fill(178, 0, 255);
              break;
            case 'o':
              fill(255, 128, 0);
              break;
            case '*':
              fill(255, 0, 213);
              break;
            case '.':
              fill(255, 255, 255);
              if (frameCount % 180 < 90) {
                level[whichLevel][i][j][k] = ',';
              }
            case ',':
              if (frameCount % 180 >= 90) {
                level[whichLevel][i][j][k] = '.';
              }
            default:
              fill(255, 255, 255);
              break;
          }
          if (level[whichLevel][i][j][k] != ',') {
            translate(k * cubeSize, -1 * i * cubeSize, -j * cubeSize);
            box(cubeSize);
            translate(-1 * k * cubeSize, i * cubeSize, j * cubeSize);
          }
        }
      }
    }
  }
}

void moveToSpawn(char[][][][] level) {
  //moves you to the spawnpoint
  camCenterX = 100;
  camCenterY = 100;
  camCenterZ = -100;
  curXRadians = atan((camZ - camCenterZ) / (camX - camCenterX));
  curYRadians = -atan((camY - camCenterY) / sqrt((camX - camCenterX) * (camX - camCenterX) + (camZ - camCenterZ) * (camZ - camCenterZ)));
  for (int i = 0; i < 6; i++) {
    for (int j = 0; j < 16; j++) {
      for (int k = 0; k < 16; k++) {
        if (level[whichLevel][i][j][k] == 's') {
          camX = k * cubeSize;
          camY = i * cubeSize - cubeSize / 2 - playerHeight - 4;
          camZ = (-j) * cubeSize;
          return;
        }
      }
    }
  }
  // println("no spawnpoint found");
}

boolean checkLevelWin(char[][][][] level) {
  //did you win
  int lowi = ceil(-(camY + 2 * cubeSize + 3 - cubeSize / 2) / cubeSize);
  int j = floor(-(camZ - cubeSize/2) / cubeSize);
  int k = floor((camX + cubeSize/2) / cubeSize);
  try {
    if (level[whichLevel][--lowi][j][k] == '*') {
      return true;
    }
  }
  catch (Exception e) {
    return false;
  }
  
  return false;
}

void pauseMenu() {
  //paused
  cursor();
  camera();
  image(menu, 0, 0, width, height);
  if (button(width/2, height/5, width/5, height/5)) {
    image(menu2, 0, 0, width, height);
    strokeWeight(4);
    fill(0, 120, 0);
    rectMode(CENTER);
    rect(width/2, height/5, width/5, height/5);
    fill(120, 0, 0);
    textAlign(CENTER);
    textSize(50);
    text("Quit the game", width/2, height/5);
  } else {
    strokeWeight(1);
    fill(0, 255, 0);
    rectMode(CENTER);
    rect(width/2, height/5, width/5, height/5);
    fill(255, 0, 0);
    textAlign(CENTER);
    textSize(50);
    text("Quit the game", width/2, height/5);
  }
  
  strokeWeight(1);
}

void deadMenu() {
  //you're dead
  cursor();
  camera();
  image(dead, 0, 0, width, height);
  if (button(width/2, height/5, width/5, height/5)) {
    strokeWeight(4);
    fill(0, 120, 0);
    rectMode(CENTER);
    rect(width/2, height/5, width/5, height/5);
    fill(120, 0, 0);
    textAlign(CENTER);
    textSize(50);
    text("Respawn", width/2, height/5);
  } else {
    strokeWeight(1);
    fill(0, 255, 0);
    rectMode(CENTER);
    rect(width/2, height/5, width/5, height/5);
    fill(255, 0, 0);
    textAlign(CENTER);
    textSize(50);
    text("Respawn", width/2, height/5);
  }
  
  strokeWeight(1);
}

void setup() {
  //setup a bunch of stuff
  size(displayWidth, displayHeight, P3D);
  noCursor();
  moveToSpawn(level);
  camera(camX, camY, camZ, camCenterX, camCenterY, camCenterZ, 0, 1, 0);
  background(255);
  try {
    //setting up robot for moving mouse to the middle
    robot = new Robot();
  }
  catch (AWTException e) {
   e.printStackTrace();
  }
  
  bg = loadImage("background.png");
  dead = loadImage("dead.png");
  menu = loadImage("menu.png");
  menu2 = loadImage("menu2.png");
  instructions = loadImage("instructions.png");
  level1 = loadImage("level1.png");
  level2 = loadImage("level2.png");
  level3 = loadImage("level3.png");
  
  //moving the mouse to the middle of the screen
  robot.mouseMove(width/2, height/2);
  
  //some perspective stuff so you don't see through blocks that you're close to
  float fov = PI/3.0;
  float cameraZ = (height/2.0) / tan(fov/2.0);
  float nearClippingDistance = 0.01;
  perspective(fov, float(width)/float(height), nearClippingDistance, cameraZ*10.0);
}

void draw() {
  //a bunch of logic, utilizes all of the above functions to make a working game
  background(255);
  if (!escMenu && !isDead) {
    if (start) {
      if (!ignoreCursor && !betweenLevels && !won) {
        noCursor();
        posX = camX + playerHorizontalSize;
        posZ = camZ + playerHorizontalSize;
        negX = camX - playerHorizontalSize;
        negZ = camZ - playerHorizontalSize;
        if (!(mousePressed && (mouseButton == RIGHT))) {
          moveSpeed = 1;
        }
        
        movePlayer();
        
        if (isOnGround() && spacePressed) {
          yChange = yChangeJump;
        }
        
        if (yChange > 0) {
          camY -= yChange;
          camCenterY -= yChange;
          yChange -= yChangeChange;
        } else if (!isOnGround()){
          if (fallDistanceLeft > 1) {
            // println("falling");
            isOnGround();
            camY -= yChange;
            camCenterY -= yChange;
            yChange -= yChangeChange;
            if (yChange < yTerminalVelocity) {
              yChange = yTerminalVelocity;
            }
          } else {
            camY += fallDistanceLeft - 0.001;
            camCenterY += fallDistanceLeft - 0.001;
            yChange = 0;
          }
        }
        
        if (camY > 100) {
          isDead = true;
        }
        if (isOnGround()) {
          jumpTimeLeft = 15;
        }
        moveMouse();
        
        robot.mouseMove(width/2, height/2);
        camera(camX, camY, camZ, camCenterX, camCenterY, camCenterZ, 0, 1, 0);
        drawBlocks(level);
        
        if (checkLevelWin(level)) {
          frameReference = frameCount;
          betweenLevels = true;
          whichLevel++;
        }
      } else if (ignoreCursor) {
        ignoreCursor = false;
      } else if (betweenLevels && !won) {
        try {
          level[whichLevel][1][1][1] = level[whichLevel][1][1][1];
        }
        catch (Exception e) {
          // println(whichLevel);
          // println("you won");
          won = true;
          betweenLevels = false;
        }
        camera();
        fill(0);
        if (whichLevel == 0) {
          image(level1, 0, 0, width, height);
        } else if (whichLevel == 1) {
          image(level2, 0, 0, width, height);
        } else if (whichLevel == 3) {
          image(level3, 0, 0, width, height);
        }
        switch (whichLevel) {
          case (0):
            image(level1, 0, 0, width, height);
            break;
          case (1):
            image(level2, 0, 0, width, height);
            break;
          case (3):
            image(level3, 0, 0, width, height);
            break;
          default:
            background(120);
            textSize(60);
            text("I don't have a background for this level", width / 2, height / 2);
        }
        textSize(60);
        textAlign(CENTER);
        text("Level " + (whichLevel + 1), width / 2, height / 5);
        if (frameCount - frameReference > 180) {
          moveToSpawn(level);
          camCenterX = 100;
          camCenterY = 100;
          camCenterZ = -100;
          ignoreCursor = true;
          robot.mouseMove(width/2, height/2);
          betweenLevels = false;
        }
      } else if (won) {
        whichLevel = 0;
        mainMenu = false;
        instructionsMenu = false;
        moveToSpawn(level);
        cursor();
        camera();
        fill(0);
        text("you won!!!!", width/2, height/5);
        
        fill(255);
        rect(width/2, height / 5 * 2, width / 4, height / 5);
        fill(0);
        text("play again", width/2, height / 5 * 2);
        
      }
    } else {
      if (mainMenu) {
        image(bg, 0, 0, width, height);
        camera();
        cursor();
        frameReference = frameCount;
        
        rectMode(CENTER);
        fill(255);
        rect(width/2, height/5, width/5, height/5);
        rect(width/2, height/5 * 3, width/5, height/5);
        
        textAlign(CENTER);
        fill(0);
        textSize(50);
        text("Start the game", width/2, height/5);
        text("Instructions", width/2, height / 5 * 3);
      } else if (instructionsMenu) {
        image(instructions, 0, 0, width, height);
        
        rectMode(CENTER);
        fill(255);
        rect(width / 10, height * 9 / 10, width / 10, height / 10);
        
        textAlign(CENTER);
        fill(0);
        textSize(50);
        text("Back", width / 10, height * 9.1 / 10);
      }
    }
    //translate(100, 100, -100); 
    //box(cubeSize); << THE FIRST CUBE
    //translate(-100, -100, 100);

  } else if (escMenu) {
    pauseMenu();
  } else if (isDead) {
    // println("you're dead");
    // println("hi");
    deadMenu();
  }
}

void keyPressed() {
  if (key == 27) {
    //esc is pressed, change the key variable so that the program doesn't exit
    key = 0;
    if (!escMenu) {
      escMenu = true;
    } else {
      escMenu = false;
      noCursor();
      ignoreCursor = true;
      robot.mouseMove(width/2, height/2);
    }
  } else {
    switch (key) {
      case 'w':
        wPressed = true;
        break;
      case 'a':
        aPressed = true;
        break;
      case 's':
        sPressed = true;
        break;
      case 'd':
        dPressed = true;
        break;
      case ' ':
        spacePressed = true;
        break;
    }
  }
}

void keyReleased() {
  //just changing the ___Pressed variables
  switch (key) {
    case 'w':
      wPressed = false;
      break;
    case 'a':
      aPressed = false;
      break;
    case 's':
      sPressed = false;
      break;
    case 'd':
      dPressed = false;
      break;
    case ' ':
      spacePressed = false;
      break;
  }
}

void mousePressed() {
  //a bunch of button stuff
  if (!start) {
    if (button(width/2, height/5, width/5, height/5)) {
      startPressedInMenu = true;
    }
  }
  // println(won, escMenu, isDead, mainMenu, instructionsMenu);
  if (escMenu) {
    mousePressedInMenu = button(width/2, height/5, width/5, height/5);
  } else if (isDead) {
    mousePressedInRespawn = button(width/2, height/5, width/5, height/5);
  } else if (mainMenu) {
    instructionsPressedInMenu = button(width/2, height/5 * 3, width/5, height/5);
  } else if (instructionsMenu) {
    backPressedInMenu = button(width / 10, height * 9 / 10, width / 10, height / 10);
  } else if (won) {
    // println("ayaya");
    paPressedInMenu = button(width/2, height / 5 * 2, width / 4, height / 5);
  }
  
  if (mouseButton == RIGHT) {
    //sprinting
    moveSpeed = 2;
  }
}

void mouseReleased() {
  //for "smarter" buttons
  if (escMenu && mousePressedInMenu) {
    if (button(width/2, height/5, width/5, height/5)) {
      exit();
    }
  } else if (isDead && mousePressedInRespawn) {
    if(button(width/2, height/5, width/5, height/5)) {
      moveToSpawn(level);
      camCenterX = 100;
      camCenterY = 100;
      camCenterZ = -100;
      curXRadians = atan((camZ - camCenterZ) / (camX - camCenterX));
      curYRadians = -atan((camY - camCenterY) / sqrt((camX - camCenterX) * (camX - camCenterX) + (camZ - camCenterZ) * (camZ - camCenterZ)));
      ignoreCursor = true;
      noCursor();
      isDead = false;
    }
  } else if (mainMenu && startPressedInMenu) {
    if (button(width/2, height/5, width/5, height/5)) {
      start = true;
    }
  } else if (mainMenu && instructionsPressedInMenu) {
    if (button(width/2, height/5 * 3, width/5, height/5)) {
      instructionsMenu = true;
      mainMenu = false;
    }
  } else if (instructionsMenu && backPressedInMenu) {
    if (button(width / 10, height * 9 / 10, width / 10, height / 10)) {
      instructionsMenu = false;
      mainMenu = true;
    }
  } else if (won && paPressedInMenu) {
    if (button(width/2, height / 5 * 2, width / 4, height / 5)) {
      // println("ayaya");
      //reset some variables
      start = false;
      mainMenu = true;
      won = false;
      whichLevel = 0;
    }
  }
}
